/// @title ERC20
/// @author Yashiru <https://github.com/Yashiru>
/// @notice Implementation of the {IERC20} interface.
///
///         This implementation is agnostic to the way tokens are created. This means
///         that a supply mechanism has to be added in a derived contract using {_MINT}.
///     
///         TIP: For a detailed writeup see our guide
///              https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
///              to implement supply mechanisms].
///     
///         We have followed general OpenZeppelin Contracts guidelines: functions revert
///         instead returning `false` on failure. This behavior is nonetheless
///         conventional and does not conflict with the expectations of ERC20
///         applications.
///     
///         The non-standard decreaseAllowance() and increaseAllowance()
///         functions have been added to mitigate the well-known issues around setting
///         allowances.

/* Imports */
#include "../../access/Ownable.huff"
#include "../../utils/Address.huff"
#include "../../utils/Map.huff"
#include "../../utils/Require.huff"

/* Interface */
// Public 
#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns (bool)
#define function increaseAllowance(address,uint256) nonpayable returns ()
#define function decreaseAllowance(address,uint256) nonpayable returns ()

// Views
#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)
#define function owner() view returns (address)
#define function decimals() view returns (uint256)
#define function name() view returns (string)
#define function symbol() view returns (string)

/* Events */
#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)

/* Events Signatures */
#define constant TRANSFER_EVENT_SIGNATURE = 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
#define constant APPROVAL_EVENT_SIGNATURE = 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925

/* Storage Slots */
#define constant BALANCE_POINTER = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_POINTER = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_POINTER = FREE_STORAGE_POINTER()

#define constant NAME_POINTER = FREE_STORAGE_POINTER()
#define constant NAME_LENGTH_POINTER = FREE_STORAGE_POINTER()

#define constant SYMBOL_POINTER = FREE_STORAGE_POINTER()
#define constant SYMBOL_LENGTH_POINTER = FREE_STORAGE_POINTER()

/* Constants */
#define constant DECIMALS = 0x12

/// @dev Inhertor callable constructor
/// @param name The token name
/// @param symbol The token symbol
/// @param supply The initial token supply
#define macro CONSTRUCTOR_ERC20() = takes(0) returns (0) {
    // Set msg.sender as the owner of the contract.
    OWNABLE_CONSTRUCTOR()

    // Mint the initial supply
    0x20                        // [size] - byte size to copy \n"
    0xA0 codesize sub           // [offset, size] - offset in the code to copy from\n "
    0x00                        // [mem, offset, size] - offset in memory to copy to \n"
    codecopy                    // [] \n"
    caller                      // [caller]
    0x00 mload                  // [arg, caller] \n"
    _MINT()

    // Store the token name string length
    0x20                        // [size] - byte size to copy \n"
    0x80 codesize sub           // [offset, size] - offset in the code to copy from\n "
    0x00                        // [mem, offset, size] - offset in memory to copy to \n"
    codecopy                    // [] \n"
    0x00 mload                  // [arg] \n"
    [NAME_LENGTH_POINTER] sstore

    // Store the token name
    // TODO: use calldata copy to support > 32 bytes string length
    0x20                        // [size] - byte size to copy \n"
    0x60 codesize sub           // [offset, size] - offset in the code to copy from\n "
    0x00                        // [mem, offset, size] - offset in memory to copy to \n"
    codecopy                    // [] \n"
    0x00 mload                  // [arg] \n"
    [NAME_POINTER] sstore

    // Store the token symbol string length
    0x20                        // [size] - byte size to copy \n"
    0x40 codesize sub           // [offset, size] - offset in the code to copy from\n "
    0x00                        // [mem, offset, size] - offset in memory to copy to \n"
    codecopy                    // [] \n"
    0x00 mload                  // [arg] \n"
    [SYMBOL_LENGTH_POINTER] sstore

    // Store the token symbol
    // TODO: use calldata copy to support > 32 bytes string length
    0x20                        // [size] - byte size to copy \n"
    0x20 codesize sub           // [offset, size] - offset in the code to copy from\n "
    0x00                        // [mem, offset, size] - offset in memory to copy to \n"
    codecopy                    // [] \n"
    0x00 mload                  // [arg] \n"
    [SYMBOL_POINTER] sstore
}

/// @dev Constructor macro. Used in test purposes only.
///      See {CONSTRUCTOR_ERC20} macro
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    CONSTRUCTOR_ERC20()
}

/// @dev Returns the name of the token.
#define macro NAME() = takes (0) returns (0) {
    0x20 0x00 mstore
    [NAME_LENGTH_POINTER] sload 0x20 mstore
    [NAME_POINTER] sload 0x40 mstore
    0x60 0x00 return
}

/// @dev Returns the symbol of the token, usually a shorter version of the
///      name.
#define macro SYMBOL() = takes (0) returns (0) {
    0x20 0x00 mstore
    [SYMBOL_LENGTH_POINTER] sload 0x20 mstore
    [SYMBOL_POINTER] sload 0x40 mstore
    0x60 0x00 return
}

/// @dev Get the total supply
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    // Load the total supply
    [TOTAL_SUPPLY_POINTER] sload   // [supply]
    // Store total supply in memory
    0x00 mstore                     // []
    // Return the first 32 bytes of memory
    0x20 0x00 return                // []
}

/// @dev Get the balance of an account
///
///      Expected calldata: `address` containing the address of the
///      targeted account.
#define macro BALANCE_OF() = takes (0) returns (0) {
    // Load the address in stack
    0x04 calldataload                               // [address]
    // Load the balance of the account
    [BALANCE_POINTER] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance]
    // Store the balance in memory
    0x00 mstore                                     // []
    // Return the first 32 bytes of the memory
    0x20 0x00 return                                // []
}

/// @dev Get the allowance of an owner towards a spender.
///
///      Expected calldata: `address, address` with the owner first
///      and the spender in second
#define macro ALLOWANCE() = takes (0) returns (0) {
    // Load the calldata's bytes from 36 to 68
    0x24 calldataload               // [to]
    // Load the calldata's bytes from 4 to 36
    0x04 calldataload               // [from, to]
    // Load the allowance of the owner towads the spender
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [value]
    
    // Store the allowance in memory 
    0x00 mstore
    // Return the first 32 bytes of memory
    0x20 0x00 return
}

/// @dev Returns the number of decimals used to get its user representation.
///      For example, if `decimals` equals `2`, a balance of `505` tokens should
///      be displayed to a user as `5.05` (`505 / 10 ** 2`).
///      
///      Tokens usually opt for a value of 18, imitating the relationship between
///      Ether and Wei. This is the value {ERC20} uses, unless this function is
///      overridden;
///      
///      NOTE: This information is only used for _display_ purposes: it in
///      no way affects any of the arithmetic of the contract, including
///      {IERC20-balanceOf} and {IERC20-transfer}.
#define macro DECIMALS() = takes (0) returns (0) {
    [DECIMALS] 0x00 mstore
    0x20 0x00 return
}

/// @dev Set the allowance of an owner towards a spender.
///
///      Expected calldata: `address, uint256` with the spender first
///      and the amount in second
#define macro APPROVE() = takes (0) returns (0) {
    // Load the calldata's bytes from 4 to 36
    0x04 calldataload               // [to]
    // Load the caller addres
    caller                          // [from, to]
    // Load the calldata's bytes from 36 to 68
    0x24 calldataload               // [value, from, to]
    dup1 dup4 dup4                  // [from, to, value, value, from, to]

    // Store the new allowance of the caller towards the spender
    STORE_ELEMENT_FROM_KEYS(0x00)   // [value, from, to]

    // Emit the transfer event.
    0x00 mstore                     // [from, to]
    [APPROVAL_EVENT_SIGNATURE]      // [sig, from, to]
    0x20 0x00                       // [0, 32, sig, from, to]
    log3                            // []

    0x01 0x00 mstore 0x20 0x00 return
}

/// @dev Atomically increases the allowance granted to `spender` by the caller.
/// 
///      This is an alternative to {approve} that can be used as a mitigation for
///      problems described in {IERC20-approve}.
/// 
///      Emits an {Approval} event indicating the updated allowance.
/// 
///      Requirements:
///         - `spender` cannot be the zero address.
#define macro INCREASE_ALLOWANCE() = takes (0) returns (0) {
    // Load the calldata's bytes from 4 to 36
    0x04 calldataload dup1          // [to, to]
    // Load the caller addres
    caller                          // [from, to, to]

    // Load the current allowance
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [allowance, to]

    // Load the calldata's bytes from 36 to 68 and ADD
    0x24 calldataload add           // [newAllowance, to]
    caller swap1                    // [newAllowance, from, to]
    dup1 dup4 dup4                  // [from, to, newAllowance, newAllowance, from, to]

    // Store the new allowance of the caller towards the spender
    STORE_ELEMENT_FROM_KEYS(0x00)

    // Emit the transfer event.
    0x00 mstore                     // [from, to]
    [APPROVAL_EVENT_SIGNATURE]      // [sig, from, to]
    0x20 0x00                       // [0, 32, sig, from, to]
    log3                         

    0x01 0x00 mstore 0x20 0x00 return
}

/// @dev Atomically decreases the allowance granted to `spender` by the caller.
///      
///      This is an alternative to {approve} that can be used as a mitigation for
///      problems described in {IERC20-approve}.
///      
///      Emits an {Approval} event indicating the updated allowance.
///      
///      Requirements:
///         - `spender` cannot be the zero address.
///         - `spender` must have allowance for the caller of at least
///           `subtractedValue`.
#define macro DECREASE_ALLOWANCE() = takes (0) returns (0) {
    // Load the calldata's bytes from 4 to 36
    0x04 calldataload dup1          // [to, to]
    // Load the caller addres
    caller                          // [from, to, to]

    // Load the current allowance
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [allowance, to]

    // Load the calldata's bytes from 36 to 68 and SUB
    0x24 calldataload swap1 sub           // [newAllowance, to]
    caller swap1                    // [newAllowance, from, to]
    dup1 dup4 dup4                  // [from, to, newAllowance, newAllowance, from, to]

    // Store the new allowance of the caller towards the spender
    STORE_ELEMENT_FROM_KEYS(0x00)

    // Emit the transfer event.
    0x00 mstore                     // [from, to]
    [APPROVAL_EVENT_SIGNATURE]      // [sig, from, to]
    0x20 0x00                       // [0, 32, sig, from, to]
    log3                         
    
    0x01 0x00 mstore 0x20 0x00 return
}

/// @dev ERC20 transfer from caller to an account
///
///      Expected calldata: `address, uint256` with the recipient first
///      and the amount in second
#define macro TRANSFER() = takes(0) returns(1) {
    // Setup the stack for the transfer function.
    0x04 calldataload   // [to]
    caller              // [from, to, msg.len, msg]
    0x24 calldataload   // [value, from, to, msg.len, msg]

    // Update the balances of the sender and recipient.
    TRANSFER_TAKE_FROM()   // [value, from, to]
    TRANSFER_GIVE_TO()          // [value, from, to]

    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []

    // Return "1" to represent a succesful transfer.
    0x01 0x00 mstore
    0x20 0x00 return
}

/// @dev ERC20 transferFrom from and account to an other
///
///      Expected calldata: `address, uint256` with the recipient first
///      and the amount in second
#define macro TRANSFER_FROM() = takes(0) returns(1) {
    // Setup the stack for the transfer function.
    0x24 calldataload                           // [to]
    0x04 calldataload dup1                      // [from, from, to]
    caller swap1                                // [from, caller, from, to]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [allowance, from, to]
    0x44 calldataload dup1                      // [value, value, allowance, from, to]
    dup3 dup2 lt swap3 eq swap1 swap2 or        // [value >= allowance, value, from, to]
    0x1D                                        // [0x1D, value >= allowance, value, from, to]            
    __RIGHTPAD(0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365)
    swap2                                       // [value < allowance || allowance == value, msg length, msg, value, from, to] 
    REQUIRE()

    // Update the balances of the sender and recipient.
    TRANSFER_TAKE_FROM()        // [value, from, to]
    TRANSFER_GIVE_TO()          // [value, from, to]

    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []

    // Return "1" to represent a succesful transfer.
    0x01 0x00 mstore
    0x20 0x00 return
}

/// @dev Decrease balance of an account according to 
///      the parent Transfer action.
///      Simply decrease the balance of the `from`.
#define macro TRANSFER_TAKE_FROM(error) = takes(3) returns (3) {
    // Ensure that the sender has a sufficient balance.
    // input stack: [value, from, to]
    dup2                // [from, value, from, to]
    [BALANCE_POINTER] LOAD_ELEMENT_FROM_KEYS(0x00)  // [balance, value, from, to]
    dup1                // [balance, balance, value, from, to]
    dup3                // [value, balance, balance, value, from, to]
    gt 0x0 eq           // [value>balance, balance, value, from, to]              
    0x1d                // [msg.len, value>balance, balance, value, from, to]
    // Check balance              
    __RIGHTPAD(0x45524332303a20616d6f756e7420657863656564732062616c616e6365)
    swap2               // [value>balance, msg.len, msg, balance, value, from, to]
    REQUIRE()

    // Update the sender's balance.
    // input stack: [balance, value, from, to]
    dup2                // [value, balance, value, from, to]
    swap1               // [balance, value, value, from, to]
    sub                 // [balance - value, value, from, to]
    dup3                // [from, balance-value, value, from, to]
    [BALANCE_POINTER] STORE_ELEMENT_FROM_KEYS(0x00) // [value, from, to]
}

/// @dev Increase balance of an account according to 
///      the parent Transfer action.
///      Simply increase the balance of the `to`.
#define macro TRANSFER_GIVE_TO() = takes(3) returns (0) { 
    // input stack: [value, from, to]
    // Require to != 0x00
    __RIGHTPAD(0x45524332303a207472616e7366657220746f207a65726f2061646472657373)
    0x1f                // [msg.len, msg, to]
    dup5                // [0x00 != to, msg.len, msg, to]
    REQUIRE()

    // Update the balance of the recipient.
    dup3                // [to, value, from, to]
    dup2                // [value, to, value, from, to]
    swap1               // [to, value, value, from, to]
    [BALANCE_POINTER] LOAD_ELEMENT_FROM_KEYS(0x00)  // [balance, value, value, from, to]
    add                 // [balance+value, value, from, to]
    dup4                // [to, balance+value, value, from, to]
    [BALANCE_POINTER] STORE_ELEMENT_FROM_KEYS(0x00) // [value, from, to]
}

/// @dev Mint token to an account
///
///      Expected calldata: `address, uint256` with the account address first
///      and the amount to mint in second
#define macro _MINT() = takes(2) returns (0) {
    // Setup the stack for the mint function.
    0x00 swap1                // [value, from (0x00), to]

    // Give tokens to the recipient.
    TRANSFER_GIVE_TO()  // [value, from, to]

    // Update totalSupply
    dup1                            // [value, value, from, to]
    [TOTAL_SUPPLY_POINTER] sload    // [supply,value,value,from,to]
    add                             // [supply+value,value,from,to]
    [TOTAL_SUPPLY_POINTER] sstore  // [value,from,to]


    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []
}

/// @dev Main inheritance proxy macro.
///
///      NOTE: When you want to inherit this proxy, you must not only import the file as 
///      `#include "@open-huff/src/token/ERC20/ERC20.huff"`,
///      but also call this MAIN_ERC20 macro in the MAIN macro of the inheritor contract.
#define macro MAIN_ERC20() = takes(0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr

    /* ERC20 JumpDest */
    dup1 __FUNC_SIG(transfer) eq transfer jumpi
    dup1 __FUNC_SIG(transferFrom) eq transferFrom jumpi
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(totalSupply) eq totalSupply jumpi
    dup1 __FUNC_SIG(approve) eq approve jumpi
    dup1 __FUNC_SIG(increaseAllowance) eq increaseAllowance jumpi
    dup1 __FUNC_SIG(decreaseAllowance) eq decreaseAllowance jumpi
    dup1 __FUNC_SIG(allowance) eq allowance jumpi
    dup1 __FUNC_SIG(decimals) eq decimals jumpi
    dup1 __FUNC_SIG(name) eq name jumpi
    dup1 __FUNC_SIG(symbol) eq symbol jumpi
    /* Ownable JumpDest */
    __FUNC_SIG(owner) eq owner jumpi

    continue jump

    /* ERC20 JumpDest */
    transfer:
        TRANSFER()
    transferFrom:
        TRANSFER_FROM()
    balanceOf:
        BALANCE_OF()
    totalSupply:
        TOTAL_SUPPLY()
    approve:
        APPROVE()
    increaseAllowance:
        INCREASE_ALLOWANCE()
    decreaseAllowance:
        DECREASE_ALLOWANCE()
    allowance:
        ALLOWANCE()
    decimals:
        DECIMALS()
    name:
        NAME()
    symbol:
        SYMBOL()

    /* Ownable JumpDest */
    owner:
        OWNER()

    continue:
}

/// @dev Main proxy macro. Used in test purposes only.
#define macro MAIN() = takes(0) returns (0) {
    MAIN_ERC20()
}

